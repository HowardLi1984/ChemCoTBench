[
    {
        "smiles": "O=C(c1ccc(-c2ccccc2)cc1)N1CCN(c2ccccc2F)CC1",
        "largest_scaffold": "O=C(c1ccc(-c2ccccc2)cc1)N1CCN(c2ccccc2)CC1",
        "task": "Murcko_scaffold",
        "json_results": {
            "Output Scaffold": "c1ccc(-c2ccccc2)cc1"
        }
    },
    {
        "smiles": "Cc1ccc(-c2nnc(SCc3ccccc3)o2)c(O)c1",
        "largest_scaffold": "c1ccc(CSc2nnc(-c3ccccc3)o2)cc1",
        "task": "Murcko_scaffold",
        "json_results": {
            "Output Scaffold": "c1ccc(-c2nnco2)cc1"
        }
    },
    {
        "smiles": "Cc1c(-c2ccc(O)cc2)n(Cc2ccc(O)cc2)c2ccc(O)cc12",
        "largest_scaffold": "c1ccc(Cn2c(-c3ccccc3)cc3ccccc32)cc1",
        "task": "Murcko_scaffold",
        "json_results": {
            "Output Scaffold": "c1ccc2c(c1)-c1ccc3ccccc3n12"
        }
    },
    {
        "smiles": "CCC(C)(C)Nc1c(C#N)cnc2cnc(NCc3cccnc3)cc12",
        "largest_scaffold": "c1cncc(CNc2cc3cccnc3cn2)c1",
        "task": "Murcko_scaffold",
        "json_results": {
            "Output Scaffold": "c1cnc2cnccc12"
        }
    },
    {
        "smiles": "CCN(CC)S(=O)(=O)c1ccc(C(=O)NCCCn2ccnc2)cc1",
        "largest_scaffold": "O=C(NCCCn1ccnc1)c1ccccc1",
        "task": "Murcko_scaffold",
        "json_results": "```json\n{\n    \"Output Scaffold\": \"c1ccc(cc1)S(=O)(=O)c2ccccc2\"\n}\n```"
    },
    {
        "smiles": "COc1cc2c(cc1OC)-c1cc(Nc3c(Cl)cccc3Cl)nc(=O)n1CC2",
        "largest_scaffold": "O=c1nc(Nc2ccccc2)cc2n1CCc1ccccc1-2",
        "task": "Murcko_scaffold",
        "json_results": "```json\n{\n    \"Output Scaffold\": \"O=C1NC=C2C=CC=CC2=N1C1=CC=CC=C1\"\n}\n```"
    },
    {
        "smiles": "CC12CCN(C(=O)C3CCC(C(=O)O)CC3)C(Cc3c(O)cccc31)C2(C)C",
        "largest_scaffold": "O=C(C1CCCCC1)N1CCC2CC1Cc1ccccc12",
        "task": "Murcko_scaffold",
        "json_results": "```json\n{\n    \"Output Scaffold\": \"C1CCN(C2CCCC2)C1\"\n}\n```"
    },
    {
        "smiles": "CC(C)n1cnc2c(NCc3ccccc3)ncnc21",
        "largest_scaffold": "c1ccc(CNc2ncnc3[nH]cnc23)cc1",
        "task": "Murcko_scaffold",
        "json_results": {
            "Output Scaffold": "n1cnc2ncnc12"
        }
    },
    {
        "smiles": "CCc1ncnc(-c2ccc(C(=O)N3CCN(CCN)CC3)c(Cl)c2)c1C#Cc1ccc(N)nc1",
        "largest_scaffold": "O=C(c1ccc(-c2ncncc2C#Cc2cccnc2)cc1)N1CCNCC1",
        "task": "Murcko_scaffold",
        "json_results": "```json\n{\n    \"Output Scaffold\": \"c1ccc2ncnc(-c3cccc4ccccc34)c2c1\"\n}\n```"
    },
    {
        "smiles": "COc1cc2nc(N3CCN(C(=O)C(F)=Cc4ccccc4)CC3)nc(N)c2cc1OC",
        "largest_scaffold": "O=C(C=Cc1ccccc1)N1CCN(c2ncc3ccccc3n2)CC1",
        "task": "Murcko_scaffold",
        "json_results": "```json\n{\n    \"Output Scaffold\": \"c1cc2nc(nc(N)c2cc1)N1CCNCC1\"\n}\n```"
    },
    {
        "smiles": "Nc1c(C(=O)c2cccc(C(O)CO)c2)cnn1-c1ccc(F)cc1",
        "largest_scaffold": "O=C(c1ccccc1)c1cnn(-c2ccccc2)c1",
        "task": "Murcko_scaffold",
        "json_results": {
            "Output Scaffold": "c1ccc2cnncc2c1-c1ccccc1"
        }
    },
    {
        "smiles": "O=C(NCC1CCCO1)C(=Cc1cccc([N+](=O)[O-])c1)NC(=O)c1ccccc1",
        "largest_scaffold": "O=C(NCC1CCCO1)C(=Cc1ccccc1)NC(=O)c1ccccc1",
        "task": "Murcko_scaffold",
        "json_results": "```json\n{\n    \"Output Scaffold\": \"C1CCCO1.c1ccc(cc1)-c1ccccc1\"\n}\n```"
    },
    {
        "smiles": "C=Cc1ccc(C2CC3CCC(C2C(=O)OC)N3C)cc1",
        "largest_scaffold": "c1ccc(C2CC3CCC(C2)N3)cc1",
        "task": "Murcko_scaffold",
        "json_results": {
            "Output Scaffold": "C1CC2CCC1N2"
        }
    },
    {
        "smiles": "CC(C)=Cc1ccc2cc(NC(=O)C3CC3)ncc2c1",
        "largest_scaffold": "O=C(Nc1cc2ccccc2cn1)C1CC1",
        "task": "Murcko_scaffold",
        "json_results": "```json\n{\n    \"Output Scaffold\": \"c1ccc2ccncc2c1\"\n}\n```"
    },
    {
        "smiles": "CC(=O)NC(C)c1ccc(OC2CCN(c3nc(N4CCCC4C)ncc3F)C2)cc1",
        "largest_scaffold": "c1ccc(OC2CCN(c3ccnc(N4CCCC4)n3)C2)cc1",
        "task": "Murcko_scaffold",
        "json_results": {
            "Output Scaffold": "c1ccc(OC2CCNC2)cc1"
        }
    },
    {
        "smiles": "Cc1ccnc(Oc2ccccc2-c2ccc(-c3cnc(N)nc3)c(F)c2)n1",
        "largest_scaffold": "c1cnc(Oc2ccccc2-c2ccc(-c3cncnc3)cc2)nc1",
        "task": "Murcko_scaffold",
        "json_results": "```json\n{\n    \"Output Scaffold\": \"c1ccc(cc1)-c1ccc(cc1)-c1ccncc1\"\n}\n```"
    },
    {
        "smiles": "CCc1ccccc1NC(=O)Cn1nc(CC)n2c(cc3sccc32)c1=O",
        "largest_scaffold": "O=C(Cn1ncn2c(cc3sccc32)c1=O)Nc1ccccc1",
        "task": "Murcko_scaffold",
        "json_results": {
            "Output Scaffold": "c1ccc2c(c1)c1sc3ccccc3n12"
        }
    },
    {
        "smiles": "CC(NC(=O)Nc1cc2[nH]nc(NC(C)c3ccccn3)c2cn1)c1ccccc1",
        "largest_scaffold": "O=C(NCc1ccccc1)Nc1cc2[nH]nc(NCc3ccccn3)c2cn1",
        "task": "Murcko_scaffold",
        "json_results": "```json\n{\n    \"Output Scaffold\": \"c1cc2[nH]nc(Nc3ccccn3)c2cn1\"\n}\n```"
    },
    {
        "smiles": "CC1CN(c2c(F)cc3c(=O)c(C(=O)O)cn(C4CC4)c3c2Cl)CCN1",
        "largest_scaffold": "O=c1ccn(C2CC2)c2cc(N3CCNCC3)ccc12",
        "task": "Murcko_scaffold",
        "json_results": "```json\n{\n    \"Output Scaffold\": \"C1CNc2cc3c(=O)cn(C4CC4)c3c2Cl\"\n}\n```"
    },
    {
        "smiles": "CC(=O)NCC1CN(c2ccc(C(C)=NO)cc2)C(=O)O1",
        "largest_scaffold": "O=C1OCCN1c1ccccc1",
        "task": "Murcko_scaffold",
        "json_results": "```json\n{\n    \"Output Scaffold\": \"O1CNCC1Nc1ccccc1\"\n}\n```"
    },
    {
        "smiles": "NC(=O)c1cncnc1Nc1cccc(C(F)(F)F)c1",
        "largest_scaffold": "c1ccc(Nc2ccncn2)cc1",
        "task": "Murcko_scaffold",
        "json_results": "```json\n{\n    \"Output Scaffold\": \"c1cncnc1c1cccc1\"\n}\n```"
    },
    {
        "smiles": "O=c1cc(-c2ccccc2)oc2cc(OCCNC3CCCCC3)cc(O)c12",
        "largest_scaffold": "O=c1cc(-c2ccccc2)oc2cc(OCCNC3CCCCC3)ccc12",
        "task": "Murcko_scaffold",
        "json_results": {
            "Output Scaffold": "O=c1ccoc2ccccc12"
        }
    },
    {
        "smiles": "O=C(O)Cc1ccc2c(c1)C(O)(C(F)(F)F)c1ccccc1-2",
        "largest_scaffold": "c1ccc2c(c1)Cc1ccccc1-2",
        "task": "Murcko_scaffold",
        "json_results": {
            "Output Scaffold": "c1ccc2c(c1)c1ccccc1-2"
        }
    },
    {
        "smiles": "Cn1c(=O)c(Oc2ccc(F)cc2F)cc2cnc(N3CCCC(O)C3)nc21",
        "largest_scaffold": "O=c1[nH]c2nc(N3CCCCC3)ncc2cc1Oc1ccccc1",
        "task": "Murcko_scaffold",
        "json_results": "```json\n{\n    \"Output Scaffold\": \"c1cc2cnc(N3CCCC3)nc2c1\"\n}\n```"
    },
    {
        "smiles": "CC(NC(=O)Nc1cc2[nH]nc(S(C)(=O)=O)c2cn1)c1ccccc1",
        "largest_scaffold": "O=C(NCc1ccccc1)Nc1cc2[nH]ncc2cn1",
        "task": "Murcko_scaffold",
        "json_results": "```json\n{\n    \"Output Scaffold\": \"c1cc2[nH]nc(N)c2cn1\"\n}\n```"
    },
    {
        "smiles": "O=C(CCCCCCC(=O)Nc1ccccc1)NO",
        "largest_scaffold": "c1ccccc1",
        "task": "Murcko_scaffold",
        "json_results": {
            "Output Scaffold": "c1ccccc1"
        }
    },
    {
        "smiles": "Cc1cc(C(N)=O)ccc1-n1c(CCC(=O)O)ccc1-c1ccc(-c2cnn(C)c2)cc1",
        "largest_scaffold": "c1ccc(-n2cccc2-c2ccc(-c3cn[nH]c3)cc2)cc1",
        "task": "Murcko_scaffold",
        "json_results": "```json\n{\n    \"Output Scaffold\": \"c1ccc(-n2cccc2)cc1-c1ccc(-c2cnn2)cc1\"\n}\n```"
    },
    {
        "smiles": "O=C(C=CNc1ccccc1C(=O)O)c1cccs1",
        "largest_scaffold": "O=C(C=CNc1ccccc1)c1cccs1",
        "task": "Murcko_scaffold",
        "json_results": "```json\n{\n    \"Output Scaffold\": \"c1ccc(CNc2ccccc2)sc1\"\n}\n```"
    },
    {
        "smiles": "N#Cc1cc2cnc(NCc3ccccc3)nc2n(C2CCCC2)c1=O",
        "largest_scaffold": "O=c1ccc2cnc(NCc3ccccc3)nc2n1C1CCCC1",
        "task": "Murcko_scaffold",
        "json_results": "```json\n{\n    \"Output Scaffold\": \"c1cc2cncnc2nc2n1\"\n}\n```"
    },
    {
        "smiles": "Cc1[nH]c2ccc(Cl)cc2c1-c1ccnc(N2CCCC2)n1",
        "largest_scaffold": "c1ccc2c(-c3ccnc(N4CCCC4)n3)c[nH]c2c1",
        "task": "Murcko_scaffold",
        "json_results": "```json\n{\n    \"Output Scaffold\": \"c1cc2ccccc2n1-c1ccnc2ccccc12\"\n}\n```"
    },
    {
        "smiles": "CN(Cc1ccco1)c1nc(-c2cccc(C#N)c2)nc2ccccc12",
        "largest_scaffold": "c1ccc(-c2nc(NCc3ccco3)c3ccccc3n2)cc1",
        "task": "Murcko_scaffold",
        "json_results": "```json\n{\n    \"Output Scaffold\": \"c1ccc2c(c1)-c1nc3ccccc3nc1-2\"\n}\n```"
    },
    {
        "smiles": "COc1cc2c(cc1OC)C1CC(N)C(N3CC(C)CCC3=O)CN1CC2",
        "largest_scaffold": "O=C1CCCCN1C1CCC2c3ccccc3CCN2C1",
        "task": "Murcko_scaffold",
        "json_results": {
            "Output Scaffold": "C1CC2CN1CC1CC3C2C1C3"
        }
    },
    {
        "smiles": "Cc1cc(=O)oc2cc(NC(=O)Cc3ccc(Br)cc3)ccc12",
        "largest_scaffold": "O=C(Cc1ccccc1)Nc1ccc2ccc(=O)oc2c1",
        "task": "Murcko_scaffold",
        "json_results": {
            "Output Scaffold": "c1ccc2ccccc2o1"
        }
    },
    {
        "smiles": "O=c1cc(-c2cccc(O)c2)oc2c1ccc1ccccc12",
        "largest_scaffold": "O=c1cc(-c2ccccc2)oc2c1ccc1ccccc12",
        "task": "Murcko_scaffold",
        "json_results": "```json\n{\n    \"Output Scaffold\": \"c1ccc2oc3ccccc3c2c1\"\n}\n```"
    },
    {
        "smiles": "COc1ccc(C(=O)NC(C)c2nccs2)cc1OC1CCN(C(C)C)CC1",
        "largest_scaffold": "O=C(NCc1nccs1)c1cccc(OC2CCNCC2)c1",
        "task": "Murcko_scaffold",
        "json_results": "```json\n{\n    \"Output Scaffold\": \"c1ccc(cc1)-c1nccs1.C1CCNCC1\"\n}\n```"
    },
    {
        "smiles": "O=C(c1ccccc1)N1CCCC(Nc2ccc(F)cc2)C1",
        "largest_scaffold": "O=C(c1ccccc1)N1CCCC(Nc2ccccc2)C1",
        "task": "Murcko_scaffold",
        "json_results": "```json\n{\n    \"Output Scaffold\": \"c1ccc(cc1)-c2ccccc2\"\n}\n```"
    },
    {
        "smiles": "CCC1(CC)C(=O)N(COC(=O)c2ccccc2)C1S(=O)(=O)c1ccccc1",
        "largest_scaffold": "O=C(OCN1C(=O)CC1S(=O)(=O)c1ccccc1)c1ccccc1",
        "task": "Murcko_scaffold",
        "json_results": "```json\n{\n    \"Output Scaffold\": \"C1C(=O)N(C1)S(=O)(=O)c1ccccc1\"\n}\n```"
    },
    {
        "smiles": "O=C(NC(=S)NCc1ccco1)c1ccc([N+](=O)[O-])cc1",
        "largest_scaffold": "O=C(NC(=S)NCc1ccco1)c1ccccc1",
        "task": "Murcko_scaffold",
        "json_results": {
            "Output Scaffold": "c1ccc(cc1)-c1ccco1"
        }
    },
    {
        "smiles": "CC(C)C(=O)NC1CCN(Cc2ccccc2)CC1",
        "largest_scaffold": "c1ccc(CN2CCCCC2)cc1",
        "task": "Murcko_scaffold",
        "json_results": "```json\n{\n    \"Output Scaffold\": \"C1CCN(Cc2ccccc2)CC1\"\n}\n```"
    },
    {
        "smiles": "CCOC(=O)CC(NC(=O)C1CCCN1)C1OC2OC(C)(C)OC2C1OC",
        "largest_scaffold": "O=C(NCC1CC2OCOC2O1)C1CCCN1",
        "task": "Murcko_scaffold",
        "json_results": {
            "Output Scaffold": "C1CCCN1C1OC2OC(C)(C)OC2C1O"
        }
    }
]